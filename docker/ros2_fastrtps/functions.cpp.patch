--- ./eProsima/ROS-RMW-Fast-RTPS-cpp/rmw_fastrtps_cpp/src/functions.cpp
+++ ./eProsima/ROS-RMW-Fast-RTPS-cpp/rmw_fastrtps_cpp/src/functions.cpp
@@ -490,6 +490,21 @@ extern "C"
                 return false;
         }
 
+        switch (qos_policies.durability)
+        {
+            case RMW_QOS_POLICY_VOLATILE_DURABILITY:
+                sattr.qos.m_durability.kind = VOLATILE_DURABILITY_QOS;
+                break;
+            case RMW_QOS_POLICY_TRANSIENT_LOCAL_DURABILITY:
+                sattr.qos.m_durability.kind = TRANSIENT_LOCAL_DURABILITY_QOS;
+                break;
+            case RMW_QOS_POLICY_DURABILITY_SYSTEM_DEFAULT:
+                break;
+            default:
+                RMW_SET_ERROR_MSG("Unknown QoS durability policy");
+                return false;
+        }
+
         if (qos_policies.depth != RMW_QOS_POLICY_DEPTH_SYSTEM_DEFAULT) {
             sattr.topic.historyQos.depth = static_cast<int32_t>(qos_policies.depth);
         }
@@ -544,6 +559,21 @@ extern "C"
                 return false;
         }
 
+        switch (qos_policies.durability)
+        {
+            case RMW_QOS_POLICY_VOLATILE_DURABILITY:
+                pattr.qos.m_durability.kind = VOLATILE_DURABILITY_QOS;
+                break;
+            case RMW_QOS_POLICY_TRANSIENT_LOCAL_DURABILITY:
+                pattr.qos.m_durability.kind = TRANSIENT_LOCAL_DURABILITY_QOS;
+                break;
+            case RMW_QOS_POLICY_DURABILITY_SYSTEM_DEFAULT:
+                break;
+            default:
+                RMW_SET_ERROR_MSG("Unknown QoS durability policy");
+                return false;
+        }
+
         if (qos_policies.depth != RMW_QOS_POLICY_DEPTH_SYSTEM_DEFAULT) {
             pattr.topic.historyQos.depth = static_cast<int32_t>(qos_policies.depth);
         }
@@ -578,10 +608,9 @@ extern "C"
             return NULL;
         }
 
-        eprosima::Log::setVerbosity(eprosima::VERB_ERROR);
-
         ParticipantAttributes participantParam;
         participantParam.rtps.builtin.domainId = static_cast<uint32_t>(domain_id);
+        participantParam.rtps.builtin.leaseDuration_announcementperiod.seconds = 3;
         participantParam.rtps.setName(name);
 
         Participant *participant = Domain::createParticipant(participantParam);
@@ -728,6 +757,7 @@ extern "C"
         publisherParam.topic.topicKind = NO_KEY;
         publisherParam.topic.topicDataType = type_name;
         publisherParam.topic.topicName = topic_name;
+        publisherParam.times.heartbeatPeriod.seconds = 3;
 
         if(!get_datawriter_qos(*qos_policies, publisherParam))
             goto fail;+++ ./eProsima/ROS-RMW-Fast-RTPS-cpp/rmw_fastrtps_cpp/src/functions.cpp
