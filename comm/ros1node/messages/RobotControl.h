// Generated by gencpp from file piap/RobotControl.msg
// DO NOT EDIT!


#ifndef PIAP_MESSAGE_ROBOTCONTROL_H
#define PIAP_MESSAGE_ROBOTCONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace piap
{
template <class ContainerAllocator>
struct RobotControl_
{
  typedef RobotControl_<ContainerAllocator> Type;

  RobotControl_()
    : turtle(0)
    , drive_reversed(false)
    , emergency_active(false)  {
    }
  RobotControl_(const ContainerAllocator& _alloc)
    : turtle(0)
    , drive_reversed(false)
    , emergency_active(false)  {
    }



   typedef uint8_t _turtle_type;
  _turtle_type turtle;

   typedef uint8_t _drive_reversed_type;
  _drive_reversed_type drive_reversed;

   typedef uint8_t _emergency_active_type;
  _emergency_active_type emergency_active;




  typedef boost::shared_ptr< ::piap::RobotControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::piap::RobotControl_<ContainerAllocator> const> ConstPtr;

}; // struct RobotControl_

typedef ::piap::RobotControl_<std::allocator<void> > RobotControl;

typedef boost::shared_ptr< ::piap::RobotControl > RobotControlPtr;
typedef boost::shared_ptr< ::piap::RobotControl const> RobotControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::piap::RobotControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::piap::RobotControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace piap

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'piap': ['/home/adabrowski/jade_ws/src/piap_demo2/msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::piap::RobotControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piap::RobotControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piap::RobotControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piap::RobotControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piap::RobotControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piap::RobotControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::piap::RobotControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a7e34793b05155a20740325f2140a832";
  }

  static const char* value(const ::piap::RobotControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa7e34793b05155a2ULL;
  static const uint64_t static_value2 = 0x0740325f2140a832ULL;
};

template<class ContainerAllocator>
struct DataType< ::piap::RobotControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "piap/RobotControl";
  }

  static const char* value(const ::piap::RobotControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::piap::RobotControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# RobotControl.msg\n\
# Message format for controlling robot basic settings from the OCU\n\
\n\
# set turtle factor\n\
uint8 turtle\n\
\n\
# set drive direction reversed\n\
bool drive_reversed\n\
\n\
# set emergency stop active\n\
bool emergency_active\n\
";
  }

  static const char* value(const ::piap::RobotControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::piap::RobotControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.turtle);
      stream.next(m.drive_reversed);
      stream.next(m.emergency_active);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct RobotControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::piap::RobotControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::piap::RobotControl_<ContainerAllocator>& v)
  {
    s << indent << "turtle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.turtle);
    s << indent << "drive_reversed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.drive_reversed);
    s << indent << "emergency_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency_active);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PIAP_MESSAGE_ROBOTCONTROL_H
